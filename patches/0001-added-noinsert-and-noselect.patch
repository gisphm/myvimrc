From e94f6cc6305a31a718dc260887a5b2cb740af919 Mon Sep 17 00:00:00 2001
From: gisphm <phmfk@hotmail.com>
Date: Mon, 8 Jun 2015 14:49:11 +0800
Subject: [PATCH 1/2] added noinsert and noselect

Signed-off-by: gisphm <phmfk@hotmail.com>
---
 runtime/doc/options.txt | 22 +++++++++++++++-------
 src/edit.c              | 38 +++++++++++++++++++++++++++++++++-----
 src/option.c            |  2 +-
 3 files changed, 49 insertions(+), 13 deletions(-)

diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
index 21cf650..ce4ea56 100644
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt
@@ -1224,7 +1224,7 @@ A jump table for the options with a short description can be found at |Q_op|.
 			    characters.  It permits dynamic French paragraph
 			    indentation (negative) or emphasizing the line
 			    continuation (positive).
-		sbr	    Display the 'showbreak' value before applying the 
+		sbr	    Display the 'showbreak' value before applying the
 			    additional indent.
 	The default value for min is 20 and shift is 0.
 
@@ -1819,6 +1819,14 @@ A jump table for the options with a short description can be found at |Q_op|.
 		    completion in the preview window.  Only works in
 		    combination with "menu" or "menuone".
 
+	   noinsert  Do not insert any text for a match until the user selects
+		    a match from the menu. Only works in combination with "menu"
+		    or "menuone". No effect if "longest" is present.
+
+	   noselect  Do not select a match in the menu, force the user to
+		    select one from the menu. Only works in combination with "menu"
+		    or "menuone".
+
 
 						*'concealcursor'* *'cocu'*
 'concealcursor' 'cocu'	string (default: "")
@@ -3329,7 +3337,7 @@ A jump table for the options with a short description can be found at |Q_op|.
 	when internal formatting is used.  Make sure the cursor is kept in the
 	same spot relative to the text then!  The |mode()| function will
 	return "i" or "R" in this situation.
-	
+
 	When the expression evaluates to non-zero Vim will fall back to using
 	the internal format mechanism.
 
@@ -4705,7 +4713,7 @@ A jump table for the options with a short description can be found at |Q_op|.
 	The cursor is displayed at the start of the space a Tab character
 	occupies, not at the end as usual in Normal mode.  To get this cursor
 	position while displaying Tabs with spaces, use: >
-		:set list lcs=tab:\ \ 
+		:set list lcs=tab:\ \
 <
 	Note that list mode will also affect formatting (set with 'textwidth'
 	or 'wrapmargin') when 'cpoptions' includes 'L'.  See 'listchars' for
@@ -4821,8 +4829,8 @@ A jump table for the options with a short description can be found at |Q_op|.
 			global or local to buffer |global-local|
 			{not in Vi}
 	Program to use for the ":make" command.  See |:make_makeprg|.
-	This option may contain '%' and '#' characters (see  |:_%| and |:_#|), 
-	which are expanded to the current and alternate file name.  Use |::S| 
+	This option may contain '%' and '#' characters (see  |:_%| and |:_#|),
+	which are expanded to the current and alternate file name.  Use |::S|
 	to escape file names in case they contain special characters.
 	Environment variables are expanded |:set_env|.  See |option-backslash|
 	about including spaces and backslashes.
@@ -5668,7 +5676,7 @@ A jump table for the options with a short description can be found at |Q_op|.
 	characters are put before the number.
 	See |hl-LineNr|  and |hl-CursorLineNr| for the highlighting used for
 	the number.
-	
+
 	The number in front of the cursor line also depends on the value of
 	'number', see |number_relativenumber| for all combinations of the two
 	options.
@@ -6428,7 +6436,7 @@ A jump table for the options with a short description can be found at |Q_op|.
 			feature}
 	String to put at the start of lines that have been wrapped.  Useful
 	values are "> " or "+++ ": >
-		:set showbreak=>\ 
+		:set showbreak=>\
 <	Note the backslash to escape the trailing space.  It's easier like
 	this: >
 		:let &showbreak = '+++ '
diff --git a/src/edit.c b/src/edit.c
index dec8385..5c3eb8f 100644
--- a/src/edit.c
+++ b/src/edit.c
@@ -108,6 +108,11 @@ static char_u	  *compl_leader = NULL;
 static int	  compl_get_longest = FALSE;	/* put longest common string
 						   in compl_leader */
 
+static int	  compl_no_insert = FALSE;	/* FALSE: select & insert
+						   TRUE: noinsert */
+static int	  compl_no_select = FALSE;	/* FALSE: select & insert
+						   TRUE: noselect */
+
 static int	  compl_used_match;	/* Selected one of the matches.  When
 					   FALSE the match was edited or using
 					   the longest common string. */
@@ -3657,8 +3662,23 @@ ins_compl_prep(c)
     if (ctrl_x_mode == CTRL_X_NOT_DEFINED_YET
 				      || (ctrl_x_mode == 0 && !compl_started))
     {
-	compl_get_longest = (vim_strchr(p_cot, 'l') != NULL);
+	compl_get_longest = (strstr((char *)p_cot, "longest") != NULL);
 	compl_used_match = TRUE;
+	if (strstr((char *)p_cot, "noselect") != NULL)
+	{
+	    compl_no_insert = FALSE;
+	    compl_no_select = TRUE;
+	}
+        else if (strstr((char *)p_cot, "noinsert") != NULL)
+	{
+	    compl_no_insert = TRUE;
+	    compl_no_select = FALSE;
+	}
+	else
+	{
+	    compl_no_insert = FALSE;
+	    compl_no_select = FALSE;
+	}
     }
 
     if (ctrl_x_mode == CTRL_X_NOT_DEFINED_YET)
@@ -4671,6 +4691,7 @@ ins_compl_next(allow_get_expansion, count, insert_match)
     compl_T *found_compl = NULL;
     int	    found_end = FALSE;
     int	    advance;
+    int	    started = compl_started;
 
     /* When user complete function return -1 for findstart which is next
      * time of 'always', compl_shown_match become NULL. */
@@ -4752,7 +4773,7 @@ ins_compl_next(allow_get_expansion, count, insert_match)
 		return -1;
 	    }
 
-	    if (advance)
+	    if (!compl_no_select && advance)
 	    {
 		if (compl_shows_dir == BACKWARD)
 		    --compl_pending;
@@ -4804,7 +4825,11 @@ ins_compl_next(allow_get_expansion, count, insert_match)
     }
 
     /* Insert the text of the new completion, or the compl_leader. */
-    if (insert_match)
+    if (compl_no_insert && !started) {
+	ins_bytes(compl_orig_text + ins_compl_len());
+	compl_used_match = FALSE;
+    }
+    else if (insert_match)
     {
 	if (!compl_get_longest || compl_used_match)
 	    ins_compl_insert();
@@ -4841,7 +4866,10 @@ ins_compl_next(allow_get_expansion, count, insert_match)
 
     /* Enter will select a match when the match wasn't inserted and the popup
      * menu is visible. */
-    compl_enter_selects = !insert_match && compl_match_array != NULL;
+    if (compl_no_insert && !started)
+	compl_enter_selects = TRUE;
+    else
+	compl_enter_selects = !insert_match && compl_match_array != NULL;
 
     /*
      * Show the file name for the match (if any)
@@ -4916,7 +4944,7 @@ ins_compl_check_keys(frequency)
 	    }
 	}
     }
-    if (compl_pending != 0 && !got_int)
+    if (compl_pending != 0 && !got_int && !compl_no_insert)
     {
 	int todo = compl_pending > 0 ? compl_pending : -compl_pending;
 
diff --git a/src/option.c b/src/option.c
index 56d9493..04e5ca3 100644
--- a/src/option.c
+++ b/src/option.c
@@ -3039,7 +3039,7 @@ static char *(p_fdm_values[]) = {"manual", "expr", "marker", "indent", "syntax",
 static char *(p_fcl_values[]) = {"all", NULL};
 #endif
 #ifdef FEAT_INS_EXPAND
-static char *(p_cot_values[]) = {"menu", "menuone", "longest", "preview", NULL};
+static char *(p_cot_values[]) = {"menu", "menuone", "longest", "preview", "noinsert", "noselect", NULL};
 #endif
 
 static void set_option_default __ARGS((int, int opt_flags, int compatible));
-- 
2.4.3

